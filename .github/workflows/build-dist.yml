name: Build and upload to PyPI

# Build on every branch push, tag push, and pull request change:
on: [push, pull_request, workflow_dispatch]
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
# on:
#   push:
#   pull_request:
#   release:
#     types:
#       - published


jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-latest, macos-latest]
        cibw_archs: ["auto"]
        include:
          - os: ubuntu-18.04
            cibw_archs: "aarch64"

    steps:
      - name: Set up QEMU
        if: matrix.cibw_archs == 'aarch64'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.1.1

      - name: Build wheels for CPython
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp36-* cp37-* cp38-* cp39-* pp36-* pp37-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          CIBW_BEFORE_BUILD: pip install Cython
          MPL_DISABLE_FH4: "yes"
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          
      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.8'

      - name: Install deps
        run: python -m pip install build twine

      - name: Build SDist
        run: python -m build --sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

      - name: Check metadata
        run: twine check dist/*

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          # To test
          # password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          # repository_url: https://test.pypi.org/legacy/
